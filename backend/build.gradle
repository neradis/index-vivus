apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

ext {
    scalaVersion = '2.10'
    scalaMinor = '3'
}

repositories {
    mavenCentral()
    maven { url 'http://repo.spray.io/' }
    flatDir name: 'local', dirs: file('libs')
}

configurations {
    scalaCompiler
    scalaLibrary
}

dependencies {
    scalaCompiler "org.scala-lang:scala-compiler:$scalaVersion.$scalaMinor"
    scalaLibrary "org.scala-lang:scala-library:$scalaVersion.$scalaMinor"

    compile "org.scala-lang:scala-library:$scalaVersion.$scalaMinor"
    compile "org.scala-lang:scala-library:$scalaVersion.$scalaMinor"

    compile 'com.h2database:h2:1.3.174'
    compile "com.typesafe.slick:slick_$scalaVersion:1.0.1"
    //compile 'org.postgresql:postgresql:9.2-1003-jdbc3'
    compile 'com.mchange:c3p0:0.9.2.1'

    compile 'com.google.guava:guava:13.+'
    compile 'com.google.gwt:gwt-dev:2.5.1' //annotations used in Guava for the Scala compiler
    compile 'org.apache.commons:commons-lang3:3.0'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'io.spray:spray-caching:1.3.0'
    compile "com.typesafe.akka:akka-actor_$scalaVersion:2.2.+"
    compile 'org.apache.httpcomponents:httpclient:4.2.3'


    compile 'org.jsoup:jsoup:1.7.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.+'
    compile 'com.google.code.gson:gson:2.2.+'
    compile 'com.typesafe:config:1.0.2'

    compile 'org.apache.lucene:lucene-core:4.6.0'
    compile 'org.apache.lucene:lucene-analyzers:3.6.2'
    compile 'org.apache.lucene:lucene-analyzers-common:4.6.0'
    compile 'org.apache.lucene:lucene-queryparser:4.6.0'
    compile 'org.ahocorasick:ahocorasick:0.2.2'

    compile ':lingpipe:4.1.0'
    compile 'log4j:log4j:1.2.+'
    compile 'org.slf4j:slf4j-log4j12:1.7.+' //needed for trace messages of h2

    testCompile "org.scalatest:scalatest_$scalaVersion:2.0.M5b"
    testCompile "org.scalamock:scalamock-scalatest-support_$scalaVersion:3.0.1"

    testCompile 'log4j:log4j:1.2.+'
}

sourceSets {
    main {
        scala.srcDirs = java.srcDirs
        output.resourcesDir = output.classesDir
    }

    test {
        scala.srcDirs = java.srcDirs
        output.resourcesDir = output.classesDir
    }
}

tasks.withType(JavaCompile) { //we compile also all Java source code with the Zinc Scala Compiler
    enabled = false
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useCompileDaemon = false
    scalaCompileOptions.useAnt = false
    scalaCompileOptions.additionalParameters = ["-target:jvm-$targetCompatibility".toString()]
}

task filterPropertyResoures(type: Copy) {
    from(processResources.source)
    into(processResources.destinationDir)

    include('*.properties')
    expand(project.properties)
    filter { String line -> line.replace('\\', '\\\\') } //escape backslashes for property files
}

processResources {
    dependsOn filterPropertyResoures

    exclude('*.properties')
}

task processAllResources(dependsOn: [processResources, processTestResources])

task cleanLogFiles << {
    file("${project.projectDir}/logs").deleteDir()
}

clean.dependsOn(cleanLogFiles)

eclipse {
    jdt {
        sourceCompatibility = project(':backend').sourceCompatibility
        targetCompatibility = project(':backend').targetCompatibility
    }

    classpath {
        defaultOutputDir = sourceSets.main.output.classesDir

        downloadSources = true
        downloadJavadoc = true
    }

}

rootProject.idea.project {
    jdkName = project(':backend').sourceCompatibility
    languageLevel = project(':backend').sourceCompatibility
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = sourceSets.main.output.classesDir
        testOutputDir = sourceSets.test.output.classesDir

        downloadSources = true
        downloadJavadoc = true
    }
}

//helper task for build investigations/debugging
task view {
    ext.viewObj = {
        println([toString: it.toString(), class: it.class, properties: it.properties.keySet(), dump: it.dump()].entrySet().collect({
            "### $it.key ###\n$it.value\n\n"
        }).join('\n'))
    }

    ext.viewFiles = { FileCollection fc ->
        fc.each { File file ->
            println file.canonicalPath
        }
    }

    doLast {
        viewObj(System.getProperty('env') || 'nothing')

    }
}
