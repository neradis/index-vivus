apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'


def replaceSuffix(File orig, int suffixLen, List<String> newSuffix) {
  def prefix = (1..suffixLen).inject(orig.canonicalFile) { File f, int k -> f.parentFile }
  newSuffix.inject(prefix) { File f, String comp -> new File(f, comp) }
}

ext {
  scalaVersion = '2.10'
  scalaMinor = '2'

  preEnhancedClassesDir = replaceSuffix(sourceSets.main.output.classesDir, 2, ['preEnhancedClasses', 'main'])
  enhancedClassesDir = replaceSuffix(sourceSets.main.output.classesDir, 2, ['enhancedClasses', 'main'])
}

repositories {
  mavenCentral()
  flatDir name: 'local', dirs: file('libs')
}

configurations {
  scalaCompiler
  scalaLibrary
}

dependencies {
  scalaCompiler "org.scala-lang:scala-compiler:$scalaVersion.$scalaMinor"
  scalaLibrary "org.scala-lang:scala-library:$scalaVersion.$scalaMinor"

  compile "org.scala-lang:scala-library:$scalaVersion.$scalaMinor"
  compile 'com.google.guava:guava:13.+'
  compile 'org.datanucleus:datanucleus-accessplatform-jpa-rdbms:3.2.8'
  compile 'com.h2database:h2:1.3.174'
  compile 'org.eclipse.persistence:javax.persistence:2.1.+'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.3.+'
  compile 'com.typesafe:config:1.0.2'

  compile 'log4j:log4j:1.2.+'

  testCompile 'junit:junit:4.+'
  testCompile 'log4j:log4j:1.2.+'
}

sourceSets {
  main {
    scala.srcDirs = java.srcDirs
    output.resourcesDir = output.classesDir
  }

  test {
    scala.srcDirs = java.srcDirs
    output.resourcesDir = output.classesDir
  }
}

compileJava.enabled = false //we compile also all Java source code with the Zinc Scala Compiler
[compileJava, compileScala].each { it.destinationDir = preEnhancedClassesDir }


tasks.withType(ScalaCompile) {
  scalaCompileOptions.useCompileDaemon = false
  scalaCompileOptions.useAnt = false
  scalaCompileOptions.additionalParameters = ["-target:jvm-$targetCompatibility".toString()]
}

task datanucleusEnhance(type: JavaExec, dependsOn: [compileJava, compileScala, processResources]) {
  classpath = configurations.compile + files(preEnhancedClassesDir, sourceSets.main.output.resourcesDir)
  main = 'org.datanucleus.enhancer.DataNucleusEnhancer'
  args = "-api JPA -pu DictionaryModels -d ${enhancedClassesDir.canonicalPath}".tokenize()

  inputs.files(preEnhancedClassesDir, sourceSets.main.output.resourcesDir)
  outputs.files(enhancedClassesDir)
}

task combineClassFiles(type: Copy, dependsOn: datanucleusEnhance) {
  from enhancedClassesDir
  into sourceSets.main.output.classesDir

  inputs.files(preEnhancedClassesDir)
  outputs.files(sourceSets.main.output.classesDir)

  doLast {
    //the Ant copy task allows not to overwrite newer files, so we use it instead of another Copy task
    ant.copy(todir: sourceSets.main.output.classesDir) {
      fileset(dir: preEnhancedClassesDir)
    }
  }
}

classes.dependsOn(datanucleusEnhance, combineClassFiles)

processResources {
  expand(project.properties)
}


eclipse {
  jdt {
    sourceCompatibility = project(':backend').sourceCompatibility
    targetCompatibility = project(':backend').targetCompatibility
  }

  classpath {
    defaultOutputDir = sourceSets.main.output.classesDir

    downloadSources = true
    downloadJavadoc = true
  }

}

rootProject.idea.project {
  jdkName = project(':backend').sourceCompatibility
  languageLevel = project(':backend').sourceCompatibility
}

idea {
  module {
    inheritOutputDirs = false
    outputDir = sourceSets.main.output.classesDir
    testOutputDir = sourceSets.test.output.classesDir

    downloadSources = true
    downloadJavadoc = true
  }
}


//helper task for build investigations/debugging
task view {
  ext.viewObj = {
    println([toString: it.toString(), class: it.class, properties: it.properties.keySet(), dump: it.dump()].entrySet().collect({
      "### $it.key ###\n$it.value\n\n"
    }).join('\n'))
  }

  ext.viewFiles = { FileCollection fc ->
    //println "#### dependencies for $conf.name"
    fc.each { File file ->
      println file.canonicalPath
    }
  }

  doLast {
    //viewFiles(configurations.compile)
    //viewFiles(configurations.compile + sourceSets.main.output.with { files(it.classesDir, it.resourcesDir) })

    /*viewObj(compileScala)*/
    println('java inputs')
    viewFiles(compileJava.inputs.files)
    println('java source')
    viewFiles(compileJava.source)
    viewFiles(compileScala.source)

    /*viewFiles(compileJava.outputs.outputFiles)*/
  }
}