evaluationDependsOn(':backend')

ext.backend = project(':backend')

buildscript {
    dependencies {
        //classpath files(project(':backend').configurations.compile + project(':backend').sourceSets.main.output)
        classpath project(':backend').sourceSets.main.runtimeClasspath
    }
}

task queryBackendEnvironment(dependsOn: backend.classes) << { queryEnvironment() }

task cleanDb(dependsOn: [backend.classes, queryBackendEnvironment]) << {

    fileTree(backendDataDir).include("*.db").each { it.delete() }
}

task cleanIndices(dependsOn: [backend.classes, queryBackendEnvironment]) << {

    ext.dataDir = project.backendDataDir

    fileTree(dataDir).include("*.model").include { "index.lucene.bin/**/*" }.each { it.delete() }
    new File(dataDir, 'index.lucene.bin').deleteDir()
}

task cleanDdAndIndices(dependsOn: [cleanDb, cleanIndices])

task initDb(dependsOn: backend.classes) << {
    de.fusionfactory.index_vivus.persistence.DbHelper.createMissingTables()
}

task dbReport(dependsOn: [backend.classes, initDb]) << {
    ext.envName = de.fusionfactory.index_vivus.configuration.Environment.getActive().name
    ext.abbr = de.fusionfactory.index_vivus.models.scalaimpl.Abbreviation
    ext.entry = de.fusionfactory.index_vivus.models.scalaimpl.DictionaryEntry
    ext.lang = de.fusionfactory.index_vivus.services.Language

    ext.listReport = { String descFormat, List list ->
        printf(descFormat + '%n', list.size())
        println(list[0..<Math.min(32, list.size())].join('\n'))
        println()
    }

    println("DB content summary for $envName")
    listReport('%d abbreviations', abbr.fetchAll())

    listReport('%d Latin entries', entry.fetchBySourceLanguage(lang.LATIN))

    listReport('%d Greek entries', entry.fetchBySourceLanguage(lang.GREEK))
}

task loadFixtures(type: JavaExec, dependsOn: backend.classes) {
    main = 'de.fusionfactory.index_vivus.testing.fixtures.LoadFixtures'
    args = []

    classpath = backend.sourceSets.main.runtimeClasspath

    doFirst {
        systemProperties.env = backendEnvironment.toLowerCase()
    }
}

task importDictionaries(type: JavaExec, dependsOn: [backend.classes, initDb, queryBackendEnvironment]) {
    main = 'de.fusionfactory.index_vivus.xmlimport.Importer'
    args = []

    classpath = backend.sourceSets.main.runtimeClasspath

    doFirst {
        systemProperties.env = backendEnvironment.toLowerCase()
    }
}

task createFulltextIndex(type: JavaExec, dependsOn: [backend.classes, initDb, queryBackendEnvironment]) {
    mustRunAfter(project.importDictionaries)

    main = 'de.fusionfactory.index_vivus.indexer.Indexer'
    args = []

    classpath = backend.sourceSets.main.runtimeClasspath

    doFirst {
        systemProperties.env = backendEnvironment.toLowerCase()
    }
}


task createAll(dependsOn: [backend.classes, queryBackendEnvironment]) {

    ext.messages = []
    queryEnvironment()

    if (!dbExists()) {
        messages << "createAll: Created database and imported entries."
        it.dependsOn importDictionaries
    } else {
        messages << "createAll: Database already existed - skipped DB creation and entry imports."
    }

    if (!indexExists()) {
        messages << "createAll: Created fulltext index."
        it.dependsOn createFulltextIndex
    } else {
        messages << "createAll: Fulltext index already existed - skipped indexing."
    }

    doFirst {
        messages.each logger.&lifecycle
    }
}

task recreateAll(dependsOn: [backend.classes]) {

    ext.messages = []
    queryEnvironment()

    if (dbExists()) {
        messages << "recreateAll: Will delete existing database files."
        project.importDictionaries.dependsOn cleanDb
        messages << "recreateAll: Will create database anew and import entries."
        it.dependsOn importDictionaries
    } else {
        messages << "recreateAll: Will create database and import entries."
        it.dependsOn importDictionaries
    }

    if (indexExists()) {
        messages << "recreateAll: Will delete existing index files."
        project.createFulltextIndex.dependsOn cleanIndices
        messages << "recreateAll: Will create fulltext index anew."
        it.dependsOn createFulltextIndex
    } else {
        messages << "recreateAll: Will create fulltext index"
        it.dependsOn createFulltextIndex
    }

    doFirst {
        messages.each logger.&lifecycle
    }
}



def queryEnvironment() {
    project.ext.backendEnvironment = de.fusionfactory.index_vivus.configuration.Environment.getActive().name
    project.ext.backendDataDir = new File(backend.projectDir, "data/$backendEnvironment")
}


def dbExists() { //using tasks must depend on queryBackendEnvironment
    fileTree(project.backendDataDir).include("*h2.db").any { it.exists() }
}

def indexExists() { //using tasks must depend on queryBackendEnvironment

    new File(project.backendDataDir, 'index.lucene.bin').isDirectory()
}
